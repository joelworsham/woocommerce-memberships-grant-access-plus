(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var data = WCM_GAP;
var l10n = data['l10n'];

/**
 * Initialize the system.
 *
 * @since {{VERSION}}
 */
var initialize = function initialize() {

    var $actionButton = document.getElementById('grant-access');

    if (!$actionButton) {

        return;
    }

    $actionButton.addEventListener('click', handleActionClick);
};

/**
 * Fires on clicking the main action button.
 *
 * @since {{VERSION}}
 *
 * @param event
 */
var handleActionClick = function handleActionClick(event) {

    event.preventDefault();

    if (confirm(l10n['confirmGrantAccess'])) {

        runImport();
    }

    return false;
};

/**
 * Runs the import.
 *
 * @since {{VERSION}}
 */
var runImport = function runImport() {

    window.onbeforeunload = function () {
        return 'ARE YOU SURE? The import will be cancelled and data could be corrupt.';
    };

    var $modal = jQuery('#wcm-gap-modal');
    var totalOrders = parseInt(data['totalOrders']);
    var limit = 10;
    var processedOrders = 0;
    var grantCount = 0;

    $modal.show();

    var runImportInner = function runImportInner() {

        jQuery.ajax({
            url: ajaxurl,
            method: 'post',
            data: {
                action: 'wcm_gap_grant_access_run',
                wcm_gap_ajax: '1',
                offset: processedOrders,
                limit: limit,
                post: data['post'],
                _wpnonce: data['nonce']
            },
            success: function success(response) {

                processedOrders = processedOrders + limit;
                grantCount = grantCount + parseInt(response.data.grant_count);

                updateProgressBar((processedOrders / totalOrders * 100).toFixed(2));
                updateTotalGranted(grantCount);

                if (processedOrders < totalOrders) {

                    runImportInner();
                } else {

                    var $finished = jQuery('.wcm-gap-modal-finished');

                    $finished.show();
                }
            }
        });
    };

    runImportInner();
};

/**
 * Updates the progress bar.
 *
 * @since {{VERSION}}
 *
 * @var {int} progress
 */
var updateProgressBar = function updateProgressBar(progress) {

    var $bar = jQuery('.wcm-gap-modal-progress-bar');
    var $percentage = jQuery('.wcm-gap-modal-progress-percentage');

    $bar.css('width', progress + '%');
    $percentage.html(progress + '%');
};

/**
 * Updates the total granted notice.
 *
 * @since {{VERSION}}
 *
 * @var {int} total
 */
var updateTotalGranted = function updateTotalGranted(total) {

    var $granted = jQuery('.wcm-gap-modal-total-granted');

    $granted.html(total);
};

// Initialize after DOM ready
jQuery(initialize);

// Must use jQuery to remove this handler
jQuery(function () {
    jQuery('#grant-access').off('click');
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvc3JjL2pzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxJQUFNLE9BQU8sT0FBYjtBQUNBLElBQU0sT0FBTyxLQUFLLE1BQUwsQ0FBYjs7QUFFQTs7Ozs7QUFLQSxJQUFNLGFBQWEsU0FBYixVQUFhLEdBQU07O0FBRXJCLFFBQU0sZ0JBQWdCLFNBQVMsY0FBVCxDQUF3QixjQUF4QixDQUF0Qjs7QUFFQSxRQUFLLENBQUMsYUFBTixFQUFzQjs7QUFFbEI7QUFDSDs7QUFFRCxrQkFBYyxnQkFBZCxDQUErQixPQUEvQixFQUF3QyxpQkFBeEM7QUFDSCxDQVZEOztBQVlBOzs7Ozs7O0FBT0EsSUFBTSxvQkFBb0IsU0FBcEIsaUJBQW9CLENBQUMsS0FBRCxFQUFXOztBQUVqQyxVQUFNLGNBQU47O0FBRUEsUUFBSyxRQUFRLEtBQUssb0JBQUwsQ0FBUixDQUFMLEVBQTJDOztBQUV2QztBQUNIOztBQUVELFdBQU8sS0FBUDtBQUNILENBVkQ7O0FBWUE7Ozs7O0FBS0EsSUFBTSxZQUFZLFNBQVosU0FBWSxHQUFNOztBQUVwQixXQUFPLGNBQVAsR0FBd0IsWUFBVTtBQUM5QixlQUFPLHVFQUFQO0FBQ0gsS0FGRDs7QUFJQSxRQUFNLFNBQVMsT0FBTyxnQkFBUCxDQUFmO0FBQ0EsUUFBTSxjQUFnQixTQUFTLEtBQUssYUFBTCxDQUFULENBQXRCO0FBQ0EsUUFBTSxRQUFnQixFQUF0QjtBQUNBLFFBQUksa0JBQWtCLENBQXRCO0FBQ0EsUUFBSSxhQUFrQixDQUF0Qjs7QUFFQSxXQUFPLElBQVA7O0FBRUEsUUFBTSxpQkFBaUIsU0FBakIsY0FBaUIsR0FBTTs7QUFFekIsZUFBTyxJQUFQLENBQVk7QUFDUixpQkFBSyxPQURHO0FBRVIsb0JBQVEsTUFGQTtBQUdSLGtCQUFNO0FBQ0Ysd0JBQVEsMEJBRE47QUFFRiw4QkFBYyxHQUZaO0FBR0Ysd0JBQVEsZUFITjtBQUlGLHVCQUFPLEtBSkw7QUFLRixzQkFBTSxLQUFLLE1BQUwsQ0FMSjtBQU1GLDBCQUFVLEtBQUssT0FBTDtBQU5SLGFBSEU7QUFXUixxQkFBUyxpQkFBQyxRQUFELEVBQWM7O0FBRW5CLGtDQUFrQixrQkFBa0IsS0FBcEM7QUFDQSw2QkFBa0IsYUFBYSxTQUFTLFNBQVMsSUFBVCxDQUFjLFdBQXZCLENBQS9COztBQUVBLGtDQUFrQixDQUFFLGtCQUFrQixXQUFuQixHQUFrQyxHQUFuQyxFQUF3QyxPQUF4QyxDQUFnRCxDQUFoRCxDQUFsQjtBQUNBLG1DQUFtQixVQUFuQjs7QUFFQSxvQkFBSyxrQkFBa0IsV0FBdkIsRUFBcUM7O0FBRWpDO0FBRUgsaUJBSkQsTUFJTzs7QUFFSCx3QkFBTSxZQUFZLE9BQU8seUJBQVAsQ0FBbEI7O0FBRUEsOEJBQVUsSUFBVjtBQUNIO0FBQ0o7QUE3Qk8sU0FBWjtBQStCSCxLQWpDRDs7QUFtQ0E7QUFDSCxDQWxERDs7QUFvREE7Ozs7Ozs7QUFPQSxJQUFNLG9CQUFvQixTQUFwQixpQkFBb0IsQ0FBQyxRQUFELEVBQWM7O0FBRXBDLFFBQU0sT0FBYyxPQUFPLDZCQUFQLENBQXBCO0FBQ0EsUUFBTSxjQUFjLE9BQU8sb0NBQVAsQ0FBcEI7O0FBRUEsU0FBSyxHQUFMLENBQVMsT0FBVCxFQUFrQixXQUFXLEdBQTdCO0FBQ0EsZ0JBQVksSUFBWixDQUFpQixXQUFXLEdBQTVCO0FBQ0gsQ0FQRDs7QUFTQTs7Ozs7OztBQU9BLElBQU0scUJBQXFCLFNBQXJCLGtCQUFxQixDQUFDLEtBQUQsRUFBVzs7QUFFbEMsUUFBTSxXQUFXLE9BQU8sOEJBQVAsQ0FBakI7O0FBRUEsYUFBUyxJQUFULENBQWMsS0FBZDtBQUNILENBTEQ7O0FBT0E7QUFDQSxPQUFPLFVBQVA7O0FBRUE7QUFDQSxPQUFPLFlBQVk7QUFDZixXQUFPLGVBQVAsRUFBd0IsR0FBeEIsQ0FBNEIsT0FBNUI7QUFDSCxDQUZEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImNvbnN0IGRhdGEgPSBXQ01fR0FQO1xuY29uc3QgbDEwbiA9IGRhdGFbJ2wxMG4nXTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBzeXN0ZW0uXG4gKlxuICogQHNpbmNlIHt7VkVSU0lPTn19XG4gKi9cbmNvbnN0IGluaXRpYWxpemUgPSAoKSA9PiB7XG5cbiAgICBjb25zdCAkYWN0aW9uQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dyYW50LWFjY2VzcycpO1xuXG4gICAgaWYgKCAhJGFjdGlvbkJ1dHRvbiApIHtcblxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgJGFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUFjdGlvbkNsaWNrKTtcbn1cblxuLyoqXG4gKiBGaXJlcyBvbiBjbGlja2luZyB0aGUgbWFpbiBhY3Rpb24gYnV0dG9uLlxuICpcbiAqIEBzaW5jZSB7e1ZFUlNJT059fVxuICpcbiAqIEBwYXJhbSBldmVudFxuICovXG5jb25zdCBoYW5kbGVBY3Rpb25DbGljayA9IChldmVudCkgPT4ge1xuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICggY29uZmlybShsMTBuWydjb25maXJtR3JhbnRBY2Nlc3MnXSkgKSB7XG5cbiAgICAgICAgcnVuSW1wb3J0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJ1bnMgdGhlIGltcG9ydC5cbiAqXG4gKiBAc2luY2Uge3tWRVJTSU9OfX1cbiAqL1xuY29uc3QgcnVuSW1wb3J0ID0gKCkgPT4ge1xuXG4gICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuICdBUkUgWU9VIFNVUkU/IFRoZSBpbXBvcnQgd2lsbCBiZSBjYW5jZWxsZWQgYW5kIGRhdGEgY291bGQgYmUgY29ycnVwdC4nO1xuICAgIH07XG5cbiAgICBjb25zdCAkbW9kYWwgPSBqUXVlcnkoJyN3Y20tZ2FwLW1vZGFsJyk7XG4gICAgY29uc3QgdG90YWxPcmRlcnMgICA9IHBhcnNlSW50KGRhdGFbJ3RvdGFsT3JkZXJzJ10pO1xuICAgIGNvbnN0IGxpbWl0ICAgICAgICAgPSAxMDtcbiAgICBsZXQgcHJvY2Vzc2VkT3JkZXJzID0gMDtcbiAgICBsZXQgZ3JhbnRDb3VudCAgICAgID0gMDtcblxuICAgICRtb2RhbC5zaG93KCk7XG5cbiAgICBjb25zdCBydW5JbXBvcnRJbm5lciA9ICgpID0+IHtcblxuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICB1cmw6IGFqYXh1cmwsXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICd3Y21fZ2FwX2dyYW50X2FjY2Vzc19ydW4nLFxuICAgICAgICAgICAgICAgIHdjbV9nYXBfYWpheDogJzEnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogcHJvY2Vzc2VkT3JkZXJzLFxuICAgICAgICAgICAgICAgIGxpbWl0OiBsaW1pdCxcbiAgICAgICAgICAgICAgICBwb3N0OiBkYXRhWydwb3N0J10sXG4gICAgICAgICAgICAgICAgX3dwbm9uY2U6IGRhdGFbJ25vbmNlJ10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogKHJlc3BvbnNlKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRPcmRlcnMgPSBwcm9jZXNzZWRPcmRlcnMgKyBsaW1pdDtcbiAgICAgICAgICAgICAgICBncmFudENvdW50ICAgICAgPSBncmFudENvdW50ICsgcGFyc2VJbnQocmVzcG9uc2UuZGF0YS5ncmFudF9jb3VudCk7XG5cbiAgICAgICAgICAgICAgICB1cGRhdGVQcm9ncmVzc0JhcigoKHByb2Nlc3NlZE9yZGVycyAvIHRvdGFsT3JkZXJzKSAqIDEwMCkudG9GaXhlZCgyKSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlVG90YWxHcmFudGVkKGdyYW50Q291bnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBwcm9jZXNzZWRPcmRlcnMgPCB0b3RhbE9yZGVycyApIHtcblxuICAgICAgICAgICAgICAgICAgICBydW5JbXBvcnRJbm5lcigpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCAkZmluaXNoZWQgPSBqUXVlcnkoJy53Y20tZ2FwLW1vZGFsLWZpbmlzaGVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgJGZpbmlzaGVkLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJ1bkltcG9ydElubmVyKCk7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcHJvZ3Jlc3MgYmFyLlxuICpcbiAqIEBzaW5jZSB7e1ZFUlNJT059fVxuICpcbiAqIEB2YXIge2ludH0gcHJvZ3Jlc3NcbiAqL1xuY29uc3QgdXBkYXRlUHJvZ3Jlc3NCYXIgPSAocHJvZ3Jlc3MpID0+IHtcblxuICAgIGNvbnN0ICRiYXIgICAgICAgID0galF1ZXJ5KCcud2NtLWdhcC1tb2RhbC1wcm9ncmVzcy1iYXInKTtcbiAgICBjb25zdCAkcGVyY2VudGFnZSA9IGpRdWVyeSgnLndjbS1nYXAtbW9kYWwtcHJvZ3Jlc3MtcGVyY2VudGFnZScpO1xuXG4gICAgJGJhci5jc3MoJ3dpZHRoJywgcHJvZ3Jlc3MgKyAnJScpO1xuICAgICRwZXJjZW50YWdlLmh0bWwocHJvZ3Jlc3MgKyAnJScpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHRvdGFsIGdyYW50ZWQgbm90aWNlLlxuICpcbiAqIEBzaW5jZSB7e1ZFUlNJT059fVxuICpcbiAqIEB2YXIge2ludH0gdG90YWxcbiAqL1xuY29uc3QgdXBkYXRlVG90YWxHcmFudGVkID0gKHRvdGFsKSA9PiB7XG5cbiAgICBjb25zdCAkZ3JhbnRlZCA9IGpRdWVyeSgnLndjbS1nYXAtbW9kYWwtdG90YWwtZ3JhbnRlZCcpO1xuXG4gICAgJGdyYW50ZWQuaHRtbCh0b3RhbCk7XG59XG5cbi8vIEluaXRpYWxpemUgYWZ0ZXIgRE9NIHJlYWR5XG5qUXVlcnkoaW5pdGlhbGl6ZSk7XG5cbi8vIE11c3QgdXNlIGpRdWVyeSB0byByZW1vdmUgdGhpcyBoYW5kbGVyXG5qUXVlcnkoZnVuY3Rpb24gKCkge1xuICAgIGpRdWVyeSgnI2dyYW50LWFjY2VzcycpLm9mZignY2xpY2snKTtcbn0pOyJdfQ==
